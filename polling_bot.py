#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π polling –±–æ—Ç –¥–ª—è Render
"""
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters, 
    ContextTypes
)
from config import BOT_TOKEN, CHANNEL_ID, WELCOME_MESSAGE, HELP_MESSAGE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_stories = {}

def extract_urls(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    import re
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.findall(url_pattern, text)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(WELCOME_MESSAGE)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(HELP_MESSAGE)

async def handle_story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.message.from_user
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(message_text.split()) < 5:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! üôÇ"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ
    user_stories[user.id] = message_text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    keyboard = [
        [
            InlineKeyboardButton("üë§ –° —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"with_profile_{user.id}"),
            InlineKeyboardButton("üï∂ –ê–Ω–æ–Ω–∏–º–Ω–æ", callback_data=f"anonymous_{user.id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await update.message.reply_text(
        "üìù –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
        "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è?",
        reply_markup=reply_markup
    )

async def handle_publication_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    callback_data = query.data
    if callback_data.startswith("with_profile_"):
        user_id = int(callback_data.replace("with_profile_", ""))
        is_anonymous = False
    elif callback_data.startswith("anonymous_"):
        user_id = int(callback_data.replace("anonymous_", ""))
        is_anonymous = True
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    if user_id not in user_stories:
        await query.edit_message_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ.")
        return
    
    message_text = user_stories[user_id]
    user = query.from_user
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
    if is_anonymous:
        channel_message = f"{message_text}\n\nüïØÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"
    else:
        channel_message = f"{message_text}\n\nüïØÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—Ç @{user.username or user.first_name}"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=channel_message,
            disable_web_page_preview=False
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        publication_type = "–∞–Ω–æ–Ω–∏–º–Ω–æ" if is_anonymous else "—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è"
        await query.edit_message_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ '–î–∞, —Ç–∞–∫ —Ä–µ–∞–ª—å–Ω–æ' {publication_type}!\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–µ–ª–∏—Ç—å—Å—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º–∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏! üåü"
        )
        
        logger.info(f"Story posted from user {user.username or user.first_name} ({user.id}), anonymous: {is_anonymous}")
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del user_stories[user_id]
        
    except Exception as e:
        logger.error(f"Error posting to channel: {e}")
        await query.edit_message_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CallbackQueryHandler(handle_publication_choice))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_story))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()